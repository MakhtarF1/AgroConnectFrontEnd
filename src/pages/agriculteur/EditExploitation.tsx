"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { useParams, useNavigate, Link } from "react-router-dom"
import { ArrowLeft } from "lucide-react"
import { getExploitationById, updateExploitation } from "../../services/agriculteurService"
import Button from "../../components/common/Button"
import AnimatedCard from "../../components/common/AnimatedCard"
import LoadingScreen from "../../components/common/LoadingScreen"
import toast from "react-hot-toast"

interface ExploitationFormData {
  nom_exploitation: string
  superficie: number
  localisation: {
    adresse: string
    coordonnees_gps: {
      latitude: number
      longitude: number
    }
  }
  type_sol: string
  source_eau: string
  certification: string[]
  cultures_principales: string[]
}

const EditExploitation = () => {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [formData, setFormData] = useState<ExploitationFormData>({
    nom_exploitation: "",
    superficie: 0,
    localisation: {
      adresse: "",
      coordonnees_gps: {
        latitude: 0,
        longitude: 0,
      },
    },
    type_sol: "",
    source_eau: "",
    certification: [],
    cultures_principales: [],
  })
  const [newCulture, setNewCulture] = useState("")
  const [newCertification, setNewCertification] = useState("")

  useEffect(() => {
    const fetchExploitation = async () => {
      try {
        setIsLoading(true)
        if (id) {
          const data = await getExploitationById(id)
          setFormData({
            nom_exploitation: data.nom_exploitation,
            superficie: data.superficie,
            localisation: data.localisation,
            type_sol: data.type_sol || "",
            source_eau: data.source_eau || "",
            certification: data.certification || [],
            cultures_principales: data.cultures_principales || [],
          })
        }
      } catch (error) {
        console.error("Error fetching exploitation:", error)
        toast.error("Erreur lors du chargement de l'exploitation")
      } finally {
        setIsLoading(false)
      }
    }

    fetchExploitation()
  }, [id])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target

    if (name.includes(".")) {
      const [parent, child] = name.split(".")
      setFormData((prev) => {
        // Make sure we're dealing with an object before spreading
        const parentObj = prev[parent as keyof typeof prev]
        if (typeof parentObj === "object" && parentObj !== null) {
          return {
            ...prev,
            [parent]: {
              ...parentObj,
              [child]: value,
            },
          }
        }
        return prev
      })
    } else if (name.includes("coordonnees_gps.")) {
      const [_, coord] = name.split("coordonnees_gps.")
      setFormData((prev) => ({
        ...prev,
        localisation: {
          ...prev.localisation,
          coordonnees_gps: {
            ...prev.localisation.coordonnees_gps,
            [coord]: Number.parseFloat(value) || 0,
          },
        },
      }))
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: value,
      }))
    }
  }

  const addCulture = () => {
    if (newCulture.trim() !== "" && !formData.cultures_principales.includes(newCulture.trim())) {
      setFormData((prev) => ({
        ...prev,
        cultures_principales: [...prev.cultures_principales, newCulture.trim()],
      }))
      setNewCulture("")
    }
  }

  const removeCulture = (culture: string) => {
    setFormData((prev) => ({
      ...prev,
      cultures_principales: prev.cultures_principales.filter((c) => c !== culture),
    }))
  }

  const addCertification = () => {
    if (newCertification.trim() !== "" && !formData.certification.includes(newCertification.trim())) {
      setFormData((prev) => ({
        ...prev,
        certification: [...prev.certification, newCertification.trim()],
      }))
      setNewCertification("")
    }
  }

  const removeCertification = (certification: string) => {
    setFormData((prev) => ({
      ...prev,
      certification: prev.certification.filter((c) => c !== certification),
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      if (id) {
        await updateExploitation(id, formData)
        toast.success("Exploitation mise à jour avec succès")
        navigate(`/exploitations/${id}`)
      }
    } catch (error) {
      console.error("Error updating exploitation:", error)
      toast.error("Erreur lors de la mise à jour de l'exploitation")
    } finally {
      setIsSubmitting(false)
    }
  }

  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData((prev) => ({
            ...prev,
            localisation: {
              ...prev.localisation,
              coordonnees_gps: {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
              },
            },
          }))
          toast.success("Position actuelle récupérée")
        },
        (error) => {
          console.error("Error getting location:", error)
          toast.error("Impossible de récupérer votre position")
        },
      )
    } else {
      toast.error("La géolocalisation n'est pas supportée par votre navigateur")
    }
  }

  if (isLoading) {
    return <LoadingScreen />
  }

  return (
    <div className="py-6 fade-in">
      <div className="mb-6 slide-in">
        <Link to={`/exploitations/${id}`} className="inline-flex items-center text-primary hover:text-primary-dark">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Retour aux détails
        </Link>
      </div>

      <h1 className="text-2xl font-bold text-gray-900 mb-6 slide-in" style={{ animationDelay: "100ms" }}>
        Modifier l'exploitation
      </h1>

      <AnimatedCard className="bg-white rounded-lg shadow-sm border overflow-hidden" delay={200}>
        <form onSubmit={handleSubmit} className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div className="md:col-span-2">
              <label htmlFor="nom_exploitation" className="block text-sm font-medium text-gray-700 mb-1">
                Nom de l'exploitation <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="nom_exploitation"
                name="nom_exploitation"
                value={formData.nom_exploitation}
                onChange={handleChange}
                required
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
              />
            </div>

            <div>
              <label htmlFor="superficie" className="block text-sm font-medium text-gray-700 mb-1">
                Superficie (hectares) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                id="superficie"
                name="superficie"
                value={formData.superficie}
                onChange={handleChange}
                required
                min="0"
                step="0.01"
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
              />
            </div>

            <div>
              <label htmlFor="type_sol" className="block text-sm font-medium text-gray-700 mb-1">
                Type de sol
              </label>
              <input
                type="text"
                id="type_sol"
                name="type_sol"
                value={formData.type_sol}
                onChange={handleChange}
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
                placeholder="Ex: Argileux, Sableux, Limoneux..."
              />
            </div>

            <div>
              <label htmlFor="source_eau" className="block text-sm font-medium text-gray-700 mb-1">
                Source d'eau
              </label>
              <input
                type="text"
                id="source_eau"
                name="source_eau"
                value={formData.source_eau}
                onChange={handleChange}
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
                placeholder="Ex: Puits, Rivière, Pluie..."
              />
            </div>

            <div className="md:col-span-2">
              <label htmlFor="localisation.adresse" className="block text-sm font-medium text-gray-700 mb-1">
                Adresse <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="localisation.adresse"
                name="localisation.adresse"
                value={formData.localisation.adresse}
                onChange={handleChange}
                required
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
              />
            </div>

            <div>
              <label htmlFor="coordonnees_gps.latitude" className="block text-sm font-medium text-gray-700 mb-1">
                Latitude
              </label>
              <input
                type="number"
                id="coordonnees_gps.latitude"
                name="coordonnees_gps.latitude"
                value={formData.localisation.coordonnees_gps.latitude}
                onChange={handleChange}
                step="any"
                className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
              />
            </div>

            <div>
              <label htmlFor="coordonnees_gps.longitude" className="block text-sm font-medium text-gray-700 mb-1">
                Longitude
              </label>
              <div className="flex space-x-2">
                <input
                  type="number"
                  id="coordonnees_gps.longitude"
                  name="coordonnees_gps.longitude"
                  value={formData.localisation.coordonnees_gps.longitude}
                  onChange={handleChange}
                  step="any"
                  className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
                />
                <Button type="button" variant="outline" onClick={getCurrentLocation} className="whitespace-nowrap">
                  Position actuelle
                </Button>
              </div>
            </div>

            <div>
              <label htmlFor="cultures_principales" className="block text-sm font-medium text-gray-700 mb-1">
                Cultures principales
              </label>
              <div className="flex space-x-2">
                <input
                  type="text"
                  id="cultures_principales"
                  value={newCulture}
                  onChange={(e) => setNewCulture(e.target.value)}
                  className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
                  placeholder="Ex: Maïs, Mil, Arachide..."
                />
                <Button type="button" variant="outline" onClick={addCulture}>
                  Ajouter
                </Button>
              </div>
              {formData.cultures_principales.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {formData.cultures_principales.map((culture, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
                    >
                      {culture}
                      <button
                        type="button"
                        onClick={() => removeCulture(culture)}
                        className="ml-1 text-green-600 hover:text-green-800 focus:outline-none"
                      >
                        &times;
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>

            <div>
              <label htmlFor="certification" className="block text-sm font-medium text-gray-700 mb-1">
                Certifications
              </label>
              <div className="flex space-x-2">
                <input
                  type="text"
                  id="certification"
                  value={newCertification}
                  onChange={(e) => setNewCertification(e.target.value)}
                  className="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary"
                  placeholder="Ex: Bio, Commerce équitable..."
                />
                <Button type="button" variant="outline" onClick={addCertification}>
                  Ajouter
                </Button>
              </div>
              {formData.certification.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {formData.certification.map((certification, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                    >
                      {certification}
                      <button
                        type="button"
                        onClick={() => removeCertification(certification)}
                        className="ml-1 text-blue-600 hover:text-blue-800 focus:outline-none"
                      >
                        &times;
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={() => navigate(`/exploitations/${id}`)}>
              Annuler
            </Button>
            <Button type="submit" variant="primary" isLoading={isSubmitting} disabled={isSubmitting}>
              {isSubmitting ? "Mise à jour en cours..." : "Mettre à jour"}
            </Button>
          </div>
        </form>
      </AnimatedCard>
    </div>
  )
}

export default EditExploitation

