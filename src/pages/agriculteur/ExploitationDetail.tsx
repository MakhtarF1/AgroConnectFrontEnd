"use client"

import { useState, useEffect } from "react"
import { useParams, Link, useNavigate } from "react-router-dom"
import { ArrowLeft, Edit, Trash2, MapPin, Calendar, Droplet, Mountain } from "lucide-react"
import { getExploitationById, deleteExploitation } from "../../services/agriculteurService"
import Button from "../../components/common/Button"
import AnimatedCard from "../../components/common/AnimatedCard"
import LoadingScreen from "../../components/common/LoadingScreen"
import toast from "react-hot-toast"

interface Exploitation {
  _id: string
  nom_exploitation: string
  superficie: number
  localisation: {
    adresse: string
    coordonnees_gps: {
      latitude: number
      longitude: number
    }
  }
  type_sol?: string
  source_eau?: string
  certification: string[]
  photos: string[]
  cultures_principales: string[]
}

const ExploitationDetail = () => {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const [exploitation, setExploitation] = useState<Exploitation | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)

  useEffect(() => {
    const fetchExploitation = async () => {
      try {
        setIsLoading(true)
        if (id) {
          const data = await getExploitationById(id)
          setExploitation(data)
        }
      } catch (error) {
        console.error("Error fetching exploitation:", error)
        toast.error("Erreur lors du chargement de l'exploitation")
      } finally {
        setIsLoading(false)
      }
    }

    fetchExploitation()
  }, [id])

  const handleDelete = async () => {
    try {
      if (id) {
        await deleteExploitation(id)
        toast.success("Exploitation supprimée avec succès")
        navigate("/exploitations")
      }
    } catch (error) {
      console.error("Error deleting exploitation:", error)
      toast.error("Erreur lors de la suppression de l'exploitation")
    }
  }

  if (isLoading) {
    return <LoadingScreen />
  }

  if (!exploitation) {
    return (
      <div className="py-6 text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">Exploitation non trouvée</h2>
        <p className="text-gray-600 mb-6">L'exploitation que vous recherchez n'existe pas ou a été supprimée.</p>
        <Link to="/exploitations" className="text-primary hover:text-primary-dark">
          Retour aux exploitations
        </Link>
      </div>
    )
  }

  return (
    <div className="py-6 fade-in">
      <div className="mb-6 slide-in">
        <Link to="/exploitations" className="inline-flex items-center text-primary hover:text-primary-dark">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Retour aux exploitations
        </Link>
      </div>

      <div
        className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 slide-in"
        style={{ animationDelay: "100ms" }}
      >
        <h1 className="text-2xl font-bold text-gray-900">{exploitation.nom_exploitation}</h1>
        <div className="mt-4 md:mt-0 flex space-x-2">
          <Button to={`/exploitations/${exploitation._id}/edit`} variant="outline" className="inline-flex items-center">
            <Edit className="mr-2 h-4 w-4" />
            Modifier
          </Button>
          <Button variant="danger" className="inline-flex items-center" onClick={() => setShowDeleteConfirm(true)}>
            <Trash2 className="mr-2 h-4 w-4" />
            Supprimer
          </Button>
        </div>
      </div>

      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 fade-in">
          <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full scale-in">
            <h2 className="text-xl font-bold text-gray-900 mb-4">Confirmer la suppression</h2>
            <p className="text-gray-600 mb-6">
              Êtes-vous sûr de vouloir supprimer cette exploitation ? Cette action est irréversible.
            </p>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setShowDeleteConfirm(false)}>
                Annuler
              </Button>
              <Button variant="danger" onClick={handleDelete}>
                Supprimer
              </Button>
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <AnimatedCard className="bg-white rounded-lg shadow-sm border overflow-hidden mb-6" delay={200}>
            {exploitation.photos && exploitation.photos.length > 0 ? (
              <div className="h-80 bg-gray-200 relative">
                <img
                  src={exploitation.photos[0] || "/placeholder.svg"}
                  alt={exploitation.nom_exploitation}
                  className="w-full h-full object-cover"
                />
              </div>
            ) : (
              <div className="h-80 bg-gray-100 flex items-center justify-center">
                <p className="text-gray-400">Aucune photo disponible</p>
              </div>
            )}
          </AnimatedCard>

          <AnimatedCard className="bg-white rounded-lg shadow-sm border overflow-hidden mb-6" delay={300}>
            <div className="p-6 border-b">
              <h2 className="text-lg font-medium text-gray-900">Cultures principales</h2>
            </div>
            <div className="p-6">
              {exploitation.cultures_principales.length === 0 ? (
                <p className="text-gray-500">Aucune culture spécifiée</p>
              ) : (
                <div className="flex flex-wrap gap-2">
                  {exploitation.cultures_principales.map((culture, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800"
                    >
                      {culture}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </AnimatedCard>

          {exploitation.certification && exploitation.certification.length > 0 && (
            <AnimatedCard className="bg-white rounded-lg shadow-sm border overflow-hidden" delay={400}>
              <div className="p-6 border-b">
                <h2 className="text-lg font-medium text-gray-900">Certifications</h2>
              </div>
              <div className="p-6">
                <div className="flex flex-wrap gap-2">
                  {exploitation.certification.map((cert, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800"
                    >
                      {cert}
                    </span>
                  ))}
                </div>
              </div>
            </AnimatedCard>
          )}
        </div>

        <div className="lg:col-span-1">
          <AnimatedCard className="bg-white rounded-lg shadow-sm border overflow-hidden mb-6" delay={500}>
            <div className="p-6 border-b">
              <h2 className="text-lg font-medium text-gray-900">Informations</h2>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                <div className="flex items-start">
                  <MapPin className="h-5 w-5 text-gray-400 mt-0.5 mr-3" />
                  <div>
                    <h3 className="text-sm font-medium text-gray-900">Localisation</h3>
                    <p className="text-sm text-gray-600">{exploitation.localisation.adresse}</p>
                    <p className="text-xs text-gray-500 mt-1">
                      GPS: {exploitation.localisation.coordonnees_gps.latitude.toFixed(6)},{" "}
                      {exploitation.localisation.coordonnees_gps.longitude.toFixed(6)}
                    </p>
                  </div>
                </div>

                <div className="flex items-start">
                  <Calendar className="h-5 w-5 text-gray-400 mt-0.5 mr-3" />
                  <div>
                    <h3 className="text-sm font-medium text-gray-900">Superficie</h3>
                    <p className="text-sm text-gray-600">{exploitation.superficie} hectares</p>
                  </div>
                </div>

                {exploitation.type_sol && (
                  <div className="flex items-start">
                    <Mountain className="h-5 w-5 text-gray-400 mt-0.5 mr-3" />
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">Type de sol</h3>
                      <p className="text-sm text-gray-600">{exploitation.type_sol}</p>
                    </div>
                  </div>
                )}

                {exploitation.source_eau && (
                  <div className="flex items-start">
                    <Droplet className="h-5 w-5 text-gray-400 mt-0.5 mr-3" />
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">Source d'eau</h3>
                      <p className="text-sm text-gray-600">{exploitation.source_eau}</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </AnimatedCard>

          {exploitation.photos && exploitation.photos.length > 1 && (
            <AnimatedCard className="bg-white rounded-lg shadow-sm border overflow-hidden" delay={600}>
              <div className="p-6 border-b">
                <h2 className="text-lg font-medium text-gray-900">Photos supplémentaires</h2>
              </div>
              <div className="p-6">
                <div className="grid grid-cols-2 gap-2">
                  {exploitation.photos.slice(1).map((photo, index) => (
                    <div key={index} className="h-24 bg-gray-200 rounded overflow-hidden">
                      <img
                        src={photo || "/placeholder.svg"}
                        alt={`Photo ${index + 2}`}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  ))}
                </div>
              </div>
            </AnimatedCard>
          )}
        </div>
      </div>
    </div>
  )
}

export default ExploitationDetail

