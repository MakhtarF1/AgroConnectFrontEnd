"use client"

import { useState, useEffect } from "react"
import { Link } from "react-router-dom"
import { Tractor, Plus, Search, Edit, Trash2 } from "lucide-react"
import { getExploitations, deleteExploitation } from "../../services/agriculteurService"
import LoadingScreen from "../../components/common/LoadingScreen"
import AnimatedCard from "../../components/common/AnimatedCard"
import Button from "../../components/common/Button"
import toast from "react-hot-toast"

interface Exploitation {
  _id: string
  nom_exploitation: string
  superficie: number
  localisation: {
    adresse: string
    coordonnees_gps: {
      latitude: number
      longitude: number
    }
  }
  type_sol?: string
  source_eau?: string
  certification: string[]
  cultures_principales: string[]
  photos: string[]
}

const ExploitationList = () => {
  const [exploitations, setExploitations] = useState<Exploitation[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [confirmDelete, setConfirmDelete] = useState<string | null>(null)

  useEffect(() => {
    fetchExploitations()
  }, [])

  const fetchExploitations = async () => {
    try {
      setIsLoading(true)
      const data = await getExploitations()
      setExploitations(data)
    } catch (error) {
      console.error("Error fetching exploitations:", error)
      toast.error("Erreur lors du chargement des exploitations")
    } finally {
      setIsLoading(false)
    }
  }

  const handleDelete = async (id: string) => {
    try {
      await deleteExploitation(id)
      setExploitations(exploitations.filter((exp) => exp._id !== id))
      toast.success("Exploitation supprimée avec succès")
      setConfirmDelete(null)
    } catch (error) {
      console.error("Error deleting exploitation:", error)
      toast.error("Erreur lors de la suppression de l'exploitation")
    }
  }

  const filteredExploitations = exploitations.filter((exploitation) =>
    exploitation.nom_exploitation.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  if (isLoading) {
    return <LoadingScreen />
  }

  return (
    <div className="py-6 fade-in">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 slide-in">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Mes exploitations</h1>
          <p className="text-gray-600">Gérez vos exploitations agricoles</p>
        </div>
        <div className="mt-4 md:mt-0">
          <Button to="/exploitations/create" variant="primary" className="inline-flex items-center">
            <Plus className="mr-2 h-4 w-4" />
            Nouvelle exploitation
          </Button>
        </div>
      </div>

      <AnimatedCard className="bg-white rounded-lg shadow-sm border overflow-hidden" delay={100}>
        <div className="p-6 border-b">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <h2 className="text-lg font-medium text-gray-900 mb-4 md:mb-0">Liste des exploitations</h2>
            <div className="relative">
              <input
                type="text"
                placeholder="Rechercher..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-primary focus:border-primary"
              />
              <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
            </div>
          </div>
        </div>

        {exploitations.length === 0 ? (
          <div className="p-6 text-center text-gray-500 slide-in" style={{ animationDelay: "200ms" }}>
            <Tractor className="mx-auto h-12 w-12 text-gray-400" />
            <p className="mt-2 text-lg font-medium">Aucune exploitation</p>
            <p className="mt-1">Ajoutez votre première exploitation pour commencer.</p>
            <Button to="/exploitations/create" variant="primary" className="mt-4">
              Ajouter une exploitation
            </Button>
          </div>
        ) : filteredExploitations.length === 0 ? (
          <div className="p-6 text-center text-gray-500 slide-in" style={{ animationDelay: "200ms" }}>
            <p className="text-lg font-medium">Aucun résultat trouvé</p>
            <p className="mt-1">Essayez avec un autre terme de recherche</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
            {filteredExploitations.map((exploitation, index) => (
              <AnimatedCard
                key={exploitation._id}
                className="border rounded-lg overflow-hidden shadow-sm"
                delay={200 + index * 100}
              >
                <div className="h-40 bg-gray-200 relative">
                  {exploitation.photos && exploitation.photos.length > 0 ? (
                    <img
                      src={exploitation.photos[0] || "/placeholder.svg"}
                      alt={exploitation.nom_exploitation}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gray-100">
                      <Tractor className="h-16 w-16 text-gray-400" />
                    </div>
                  )}
                </div>
                <div className="p-4">
                  <h3 className="text-lg font-medium text-gray-900">{exploitation.nom_exploitation}</h3>
                  <p className="text-sm text-gray-500 mt-1">Superficie: {exploitation.superficie} hectares</p>
                  <p className="text-sm text-gray-500 mt-1">Localisation: {exploitation.localisation.adresse}</p>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {exploitation.cultures_principales.slice(0, 3).map((culture, idx) => (
                      <span
                        key={idx}
                        className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
                      >
                        {culture}
                      </span>
                    ))}
                    {exploitation.cultures_principales.length > 3 && (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                        +{exploitation.cultures_principales.length - 3}
                      </span>
                    )}
                  </div>
                  <div className="mt-4 flex justify-between">
                    <Link
                      to={`/exploitations/${exploitation._id}`}
                      className="text-primary hover:text-primary-dark font-medium text-sm"
                    >
                      Voir détails
                    </Link>
                    <div className="flex space-x-2">
                      <Link
                        to={`/exploitations/${exploitation._id}/edit`}
                        className="text-gray-500 hover:text-gray-700"
                        title="Modifier"
                      >
                        <Edit className="h-5 w-5" />
                      </Link>
                      {confirmDelete === exploitation._id ? (
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => handleDelete(exploitation._id)}
                            className="text-red-500 hover:text-red-700 text-xs font-medium"
                          >
                            Confirmer
                          </button>
                          <button
                            onClick={() => setConfirmDelete(null)}
                            className="text-gray-500 hover:text-gray-700 text-xs font-medium"
                          >
                            Annuler
                          </button>
                        </div>
                      ) : (
                        <button
                          onClick={() => setConfirmDelete(exploitation._id)}
                          className="text-red-500 hover:text-red-700"
                          title="Supprimer"
                        >
                          <Trash2 className="h-5 w-5" />
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              </AnimatedCard>
            ))}
          </div>
        )}
      </AnimatedCard>
    </div>
  )
}

export default ExploitationList

